#+TITLE: 计算机系统基础(下)实验报告-Cache Lab
#+Author: 何岩, 199074277 

* 说明
  :PROPERTIES:
  :CUSTOM_ID: 说明
  :END:
1. 请提交该文件生成的HTML文件, 生成快捷键为 C-c C-e h h.
2. HTML文件名格式: cachelab-2020-179074123-李雷.html

* 解题思路的文字说明
  :PROPERTIES:
  :CUSTOM_ID: 解题思路的文字说明
  :END:
** Part A: Writing a Cache Simulator
   :PROPERTIES:
   :CUSTOM_ID: part-a-writing-a-cache-simulator
   :END:
在A部分中，我们要在csim.c中编写一个缓存模拟器，该模拟器以valgrind内存跟踪为输入，在该跟踪上模拟缓存的命中/未命中行为，并输出命中，未命中和逐出的总数。

我们提供了参考缓存模拟器的二进制可执行文件，称为csim-ref，它可在valgrind跟踪文件上模拟具有任意大小和关联性的缓存行为。它使用LRU替换策略选择出需要的缓存行。

*** Cache 结构
    :PROPERTIES:
    :CUSTOM_ID: cache-结构
    :END:
设计Cache基本单元为 block，cache由cacheblock组成

#+begin_src C
  typedef struct 
  {
      unsigned tag;
      unsigned usedtime;
  } block;
  block *cache;
#+end_src

其中usedtime是判断LRU
cache行。初始值为0表示没有用过，相当于invalid。非零值越小代表越少使用，usedtime最大代表刚使用。

*** 命令行参数解析
    :PROPERTIES:
    :CUSTOM_ID: 命令行参数解析
    :END:
阅读官方给的文档，可以知道我们需要完善如下这些命令行参数

#+begin_src shell
  Usage: ./csim-ref [-hv] -s <s> -E <E> -b <b> -t <tracefile>
  • -h: Optional help flag that prints usage info
  • -v: Optional verbose flag that displays trace info
  • -s <s>: Number of set index bits (S = 2s is the number of sets)
  • -E <E>: Associativity (number of lines per set)
  • -b <b>: Number of block bits (B = 2b is the block size)
  • -t <tracefile>: Name of the valgrind trace to replay
#+end_src

具体代码如下：

#+begin_src C
  while ((opt = getopt(argc, argv, "hvs:E:b:t:")) != -1)
  {
      switch (opt)
      {
      case 'h':
          print_usage();
          exit(0);
      case 'v':
          // v = 1;
          break;
      case 's':
          s = atoi(optarg);
          break;
      case 'E':
          E = atoi(optarg);
          break;
      case 'b':
          b = atoi(optarg);
          break;
      case 't':
          f = fopen(optarg, "r");
          break;
      }
  }
#+end_src

*** 初始化 Cache
    :PROPERTIES:
    :CUSTOM_ID: 初始化-cache
    :END:
#+begin_src C
  cache = (block *)malloc(sizeof(block) * E << s);
  memset(cache, 0, sizeof(block) * E << s);
#+end_src

*** 读取文件参数
    :PROPERTIES:
    :CUSTOM_ID: 读取文件参数
    :END:
利用fscanf读取trace文件中的指令、地址

#+begin_src C
  while (fscanf(f, "%s%x,%*d\n", &op, &addr) > 0)
  {
      switch (op)
      {
      case 'M':
          hit++;
      case 'L':
      case 'S':
          find(addr, ++t);
      }
  }
#+end_src

*** 数据访问
    :PROPERTIES:
    :CUSTOM_ID: 数据访问
    :END:
获取=tag=和 =set index=同时找到对应的=row=

#+begin_src C
  unsigned tag = addr >> b >> s;
  int setindex = addr >> b ^ (tag << s);
  block *cacherow = cache + E * setindex;
  block *evictionrow = cacherow;
#+end_src

进行数据查找，其中evictionrow表示查询过程中LRU的cache行，也就是usedtime最小的（但是非0）在一个set里面遍历cache行

- 如果usedtime！=0且tag匹配：hit
- 如果usedtime=0，是个空block，使用这个block：miss
- 如果usedtime！=0，tag不匹配，跟evictionrow.usedtime比较，如果时间更小，更新evictionrow=该cacheblock

如果循环结束，也就证明这个set的所有cache行都满了，就替换LRU
cache行。具体代码如下：

#+begin_src C
  void find(unsigned addr, int time)
  {
      unsigned tag = addr >> b >> s;
      int setindex = addr >> b ^ (tag << s);
      block *cacherow = cache + E * setindex;
      block *evictionrow = cacherow;
      for (int i = 0; i < E; i++)
      {
          if (cacherow[i].usedtime && cacherow[i].tag == tag)
          {
              cacherow[i].usedtime = time;
              hit++;
              return;
          }
          else if (!cacherow[i].usedtime)
          {
              miss++;
              cacherow[i].usedtime = time;
              cacherow[i].tag = tag;
              return;
          }
          else if (cacherow[i].usedtime < evictionrow->usedtime)
              evictionrow = cacherow + i;
      }
      miss++;
      eviction++;
      evictionrow->usedtime = time;
      evictionrow->tag = tag;
  }
#+end_src

至此，Cache Simulator设计完成，完整代码见下面。

** Part B：Optimizing Matrix Transpose
   :PROPERTIES:
   :CUSTOM_ID: part-boptimizing-matrix-transpose
   :END:
在B部分中，我们将在trans.c中编写一个转置函数，该函数将尽可能降低高速缓存未命中率。需要注意的是，文档中规定了以下几点注意事项：

1. 代码必须在没有警告的情况下进行编译才能获得分数。
2. 每个转置函数最多可以定义12个int类型的局部变量。
3. 不允许使用long类型的任何变量或使用任何位技巧将多个以上的值存储到单个变量中来避开上一条规则。
4. 转置函数不能使用递归。
5. 如果选择使用辅助函数，则在辅助函数和顶级转置函数之间的某个时间堆栈上最多可以包含12个局部变量。例如，如果您的转置声明了8个变量，然后调用了一个使用4个变量的函数，然后调用了另一个使用2个变量的函数，则堆栈中将有14个变量，这将违反规则。
6. 您的转置函数可能不会修改数组A。但是，您可以对数组B的内容做任何想做的事情。
7. 您不允许在代码中定义任何数组或使用malloc的任何变体。

*** 32 × 32 (M = 32, N = 32)
    :PROPERTIES:
    :CUSTOM_ID: m-32-n-32
    :END:
32 × 32: 8 points if m < 300, 0 points if m > 600

对于32 * 32的矩阵，一次可以装下8行的值。于是用8 *
8的分块来处理，增加缓存命中。为了避免矩阵对角线访问问题，通过变量一次性读出A的一整行，再存入B。代码如下：

#+begin_src C
  for (i = 0; i < N; i += 8) {
      for (j = 0; j < M; j += 8) {
          if (i == j) {
              for (k = i; k < i + 8 && k < N; k++) {
                  a0 = A[k][j];
                  a1 = A[k][j + 1];
                  a2 = A[k][j + 2];
                  a3 = A[k][j + 3];
                  a4 = A[k][j + 4];
                  a5 = A[k][j + 5];
                  a6 = A[k][j + 6];
                  a7 = A[k][j + 7];
                  B[k][j] = a0;
                  B[k][j + 1] = a1;
                  B[k][j + 2] = a2;
                  B[k][j + 3] = a3;
                  B[k][j + 4] = a4;
                  B[k][j + 5] = a5;
                  B[k][j + 6] = a6;
                  B[k][j + 7] = a7;
              }
              for (k = i; k < i + 8 && k < N; k++) {
                  for (l = k; l < j + 8 && l < M; l++) {
                      a0 = B[l][k];
                      B[l][k] = B[k][l];
                      B[k][l] = a0;
                  }
              }
          } else {
              for (k = i; k < i + 8 && k < N; k++) {
                  for (l = j; l < j + 8 && l < M; l++) {
                      B[l][k] = A[k][l];
                  }
              }
          }
      }
  }
#+end_src

*** 64 × 64 (M = 64, N = 64)
    :PROPERTIES:
    :CUSTOM_ID: m-64-n-64
    :END:
64 × 64: 8 points if m < 1, 300, 0 points if m > 2, 000

还是考虑 8 * 8 分块的情况，不过这一次是在分块内再次分块成 4 个 4 * 4 分
块，分别处理这 4 个分块。

首先对左上角和右上角进行处理：

1. B左上角 = A左上角转置。B右上角=A右上角转置。
2. 我们最后只需要把这部分平移到B的左下角就好。

现在B左上角完成

1. 首先用四个变量存储A的左下角的一列。
2. 再用四个变量存储B的右上角的一行。
3. 把四个变量存储的A的左下角的一列移动到B右上角的一行
4. 把四个变量存储的B的右上角的一行平移到B左下角的一列
5. B的右下角=A的右下角转置

#+begin_src C
  for (j = 0; j < M; j += 8) {
      i = !(j >> 5) << 5;
      for (l = j; l < j + 8 && l < M; l++)
          for (k = j; k < j + 4 && k < N; k++)
              B[k][i + l - j] = A[k][l];
      for (l = j; l < j + 8 && l < M; l++)
          for (k = j + 4; k < j + 8 && k < N; k++)
              B[k - 4][i + l - j + 8] = A[k][l];
      for (l = j; l < j + 4 && l < M; l++) {
          for (k = j; k < j + 4 && k < N; k++)
              B[l][k] = B[k][i + l - j];
          for (k = j + 4; k < j + 8 && k < N; k++)
              B[l][k] = B[k - 4][i + l - j + 8];
      }
      for (l = j + 4; l < j + 8 && l < M; l++) {
          for (k = j; k < j + 4 && k < N; k++)
              B[l][k] = B[k][i + l - j];
          for (k = j + 4; k < j + 8 && k < N; k++)
              B[l][k] = B[k - 4][i + l - j + 8];
      }
      for (i = 0; i < N; i += 8) {
          if (i != j) {
              for (k = i; k < i + 2 && k < N; k++)
                  for (l = j; l < j + 4 && l < M; l++)
                      B[l][k] = A[k][l];
              a0 = A[i][j + 4];
              a1 = A[i][j + 5];
              a2 = A[i][j + 6];
              a3 = A[i][j + 7];
              a4 = A[i + 1][j + 4];
              a5 = A[i + 1][j + 5];
              a6 = A[i + 1][j + 6];
              a7 = A[i + 1][j + 7];
              for (k = i + 2; k < i + 4 && k < N; k++) {
                  for (l = j; l < j + 4 && l < M; l++)
                      B[l][k] = A[k][l];
                  for (l = j + 4; l < j + 8 && l < M; l++)
                      B[k - i + j][l - j + i] = A[k][l];
              }
              for (k = i + 4; k < i + 8 && k < N; k++)
                  for (l = j; l < j + 2 && l < M; l++)
                      B[l][k] = A[k][l];
              for (k = i + 2; k < i + 4 && k < N; k++)
                  for (l = j + 4; l < j + 6 && l < M; l++)
                      B[l][k] = B[k - i + j][l - j + i];
              B[j + 4][i] = a0;
              B[j + 5][i] = a1;
              B[j + 4][i + 1] = a4;
              B[j + 5][i + 1] = a5;
              a0 = B[j + 2][i + 6];
              a1 = B[j + 2][i + 7];
              a4 = B[j + 3][i + 6];
              a5 = B[j + 3][i + 7];
              for (k = i + 4; k < i + 8 && k < N; k++)
                  for (l = j + 2; l < j + 4 && l < M; l++)
                      B[l][k] = A[k][l];
              B[j + 6][i] = a2;
              B[j + 7][i] = a3;
              B[j + 6][i + 1] = a6;
              B[j + 7][i + 1] = a7;
              B[j + 6][i + 2] = a0;
              B[j + 7][i + 2] = a1;
              B[j + 6][i + 3] = a4;
              B[j + 7][i + 3] = a5;
              for (k = i + 4; k < i + 8 && k < N; k++)
                  for (l = j + 4; l < j + 8 && l < M; l++)
                      B[l][k] = A[k][l];
          }
      }
  }
#+end_src

*** 61 × 67 (M = 61, N = 67)
    :PROPERTIES:
    :CUSTOM_ID: m-61-n-67
    :END:
61 × 67: 10 points if m < 2, 000, 0 points if m > 3, 000

不规则的matrix，本质也是用分块来优化Cache的读写，但是不能找到比较显然的规律看出来间隔多少可以填满一个Cache。但是由于要求比较松，因此无需考虑处理对角线，直接进行转置操作，仅尝试换用不同的边长分块即可。

#+begin_src C
  for (i = 0; i < N; i += (i % 36 ? 20 : 16)) {
      for (j = 0; j < M; j += 4) {
          for (k = i; k < i + (i % 36 ? 20 : 16) && k < N; k += 2) {
              if (j < M)
                  a0 = A[k][j];
              if (j + 1 < M)
                  a1 = A[k][j + 1];
              if (j + 2 < M)
                  a2 = A[k][j + 2];
              if (j + 3 < M)
                  a3 = A[k][j + 3];
              if (k + 1 < N) {
                  if (j < M)
                      a4 = A[k + 1][j];
                  if (j + 1 < M)
                      a5 = A[k + 1][j + 1];
                  if (j + 2 < M)
                      a6 = A[k + 1][j + 2];
                  if (j + 3 < M)
                      a7 = A[k + 1][j + 3];
              }
              if (j < M)
                  B[j][k] = a0;
              if (j + 1 < M)
                  B[j + 1][k] = a1;
              if (j + 2 < M)
                  B[j + 2][k] = a2;
              if (j + 3 < M)
                  B[j + 3][k] = a3;
              if (k + 1 < N) {
                  if (j < M)
                      B[j][k + 1] = a4;
                  if (j + 1 < M)
                      B[j + 1][k + 1] = a5;
                  if (j + 2 < M)
                      B[j + 2][k + 1] = a6;
                  if (j + 3 < M)
                      B[j + 3][k + 1] = a7;
              }
          }
      }
  }
#+end_src

* 代码
  :PROPERTIES:
  :CUSTOM_ID: 代码
  :END:
** Part A: Writing a Cache Simulator
   :PROPERTIES:
   :CUSTOM_ID: part-a-writing-a-cache-simulator-1
   :END:
#+begin_src C
  #include "cachelab.h"
  #include <stdio.h>
  #include <stdlib.h>
  #include <string.h>
  #include <unistd.h>
  #include <getopt.h>

  int s, E, b;
  FILE *f;
  int hit, miss, eviction;
  typedef struct
  {
      int usedtime;
      unsigned tag;
  } block;
  block *cache;

  void find(unsigned addr, int time)
  {
      unsigned tag = addr >> b >> s;
      int setindex = addr >> b ^ (tag << s);
      block *cacherow = cache + E * setindex;
      block *evictionrow = cacherow;
      for (int i = 0; i < E; i++)
      {
          if (cacherow[i].usedtime && cacherow[i].tag == tag)
          {
              cacherow[i].usedtime = time;
              hit++;
              return;
          }
          else if (!cacherow[i].usedtime)
          {
              miss++;
              cacherow[i].usedtime = time;
              cacherow[i].tag = tag;
              return;
          }
          else if (cacherow[i].usedtime < evictionrow->usedtime)
              evictionrow = cacherow + i;
      }
      miss++;
      eviction++;
      evictionrow->usedtime = time;
      evictionrow->tag = tag;
  }

  void print_usage()
  {
      printf("Usage: ./csim [-hv] -s <num> -E <num> -b <num> -t <file>\n");
      printf("Options\n");
      printf("  -h        Print this help message.\n");
      printf("  -v        Optional verbose flag.\n");
      printf("  -s <num>: Number of set index bits.\n");
      printf("  -E <num>: Number of lines per set.\n");
      printf("  -b <num>: Number of block offset bits.\n");
      printf("  -t <file>: Trace file.\n");
      printf("\n");
      printf("Exampes:\n");
      printf("  linux> ./csim -s 4 -E 1 -b 4 -t traces/yi.trace\n");
      printf("  linux> ./csim -v -s 8 -E 2 -b 4 -t traces/yi.trace\n");
  }

  int main(int argc, char *argv[])
  {
      int opt;
      char op;
      unsigned addr;
      int t = 0;
      while ((opt = getopt(argc, argv, "hvs:E:b:t:")) != -1)
      {
          switch (opt)
          {
          case 'h':
              print_usage();
              exit(0);
          case 'v':
              // v = 1;
              break;
          case 's':
              s = atoi(optarg);
              break;
          case 'E':
              E = atoi(optarg);
              break;
          case 'b':
              b = atoi(optarg);
              break;
          case 't':
              f = fopen(optarg, "r");
              break;
          }
      }
      cache = (block *)malloc(sizeof(block) * E << s);
      memset(cache, 0, sizeof(block) * E << s);
      while (fscanf(f, "%s%x,%*d\n", &op, &addr) > 0)
      {
          switch (op)
          {
          case 'M':
              hit++;
          case 'L':
          case 'S':
              find(addr, ++t);
          }
      }
      fclose(f);
      free(cache);
      printSummary(hit, miss, eviction);
      return 0;
  }
#+end_src

** Part B：Optimizing Matrix Transpose
   :PROPERTIES:
   :CUSTOM_ID: part-boptimizing-matrix-transpose-1
   :END:
#+begin_src C
  #include <stdio.h>
  #include "cachelab.h"
  #include "contracts.h"

  int is_transpose(int M, int N, int A[N][M], int B[M][N]);

  /* 
   * transpose_submit - This is the solution transpose function that you
   *     will be graded on for Part B of the assignment. Do not change
   *     the description string "Transpose submission", as the driver
   *     searches for that string to identify the transpose function to
   *     be graded. The REQUIRES and ENSURES from 15-122 are included
   *     for your convenience. They can be removed if you like.
   */
  char transpose_submit_desc[] = "Transpose submission";
  void transpose_submit(int M, int N, int A[N][M], int B[M][N])
  {
      int i, j, k, l, a0, a1, a2, a3, a4, a5, a6, a7;
      REQUIRES(M > 0);
      REQUIRES(N > 0);

      if (M == 61) {
          for (i = 0; i < N; i += (i % 36 ? 20 : 16)) {
              for (j = 0; j < M; j += 4) {
                  for (k = i; k < i + (i % 36 ? 20 : 16) && k < N; k += 2) {
                      if (j < M)
                          a0 = A[k][j];
                      if (j + 1 < M)
                          a1 = A[k][j + 1];
                      if (j + 2 < M)
                          a2 = A[k][j + 2];
                      if (j + 3 < M)
                          a3 = A[k][j + 3];
                      if (k + 1 < N) {
                          if (j < M)
                              a4 = A[k + 1][j];
                          if (j + 1 < M)
                              a5 = A[k + 1][j + 1];
                          if (j + 2 < M)
                              a6 = A[k + 1][j + 2];
                          if (j + 3 < M)
                              a7 = A[k + 1][j + 3];
                      }
                      if (j < M)
                          B[j][k] = a0;
                      if (j + 1 < M)
                          B[j + 1][k] = a1;
                      if (j + 2 < M)
                          B[j + 2][k] = a2;
                      if (j + 3 < M)
                          B[j + 3][k] = a3;
                      if (k + 1 < N) {
                          if (j < M)
                              B[j][k + 1] = a4;
                          if (j + 1 < M)
                              B[j + 1][k + 1] = a5;
                          if (j + 2 < M)
                              B[j + 2][k + 1] = a6;
                          if (j + 3 < M)
                              B[j + 3][k + 1] = a7;
                      }
                  }
              }
          }
      } else if (M == 32) {
          for (i = 0; i < N; i += 8) {
              for (j = 0; j < M; j += 8) {
                  if (i == j) {
                      for (k = i; k < i + 8 && k < N; k++) {
                          a0 = A[k][j];
                          a1 = A[k][j + 1];
                          a2 = A[k][j + 2];
                          a3 = A[k][j + 3];
                          a4 = A[k][j + 4];
                          a5 = A[k][j + 5];
                          a6 = A[k][j + 6];
                          a7 = A[k][j + 7];
                          B[k][j] = a0;
                          B[k][j + 1] = a1;
                          B[k][j + 2] = a2;
                          B[k][j + 3] = a3;
                          B[k][j + 4] = a4;
                          B[k][j + 5] = a5;
                          B[k][j + 6] = a6;
                          B[k][j + 7] = a7;
                      }
                      for (k = i; k < i + 8 && k < N; k++) {
                          for (l = k; l < j + 8 && l < M; l++) {
                              a0 = B[l][k];
                              B[l][k] = B[k][l];
                              B[k][l] = a0;
                          }
                      }
                  } else {
                      for (k = i; k < i + 8 && k < N; k++) {
                          for (l = j; l < j + 8 && l < M; l++) {
                              B[l][k] = A[k][l];
                          }
                      }
                  }
              }
          }
      } else if (M == 64) {
          for (j = 0; j < M; j += 8) {
              i = !(j >> 5) << 5;
              for (l = j; l < j + 8 && l < M; l++)
                  for (k = j; k < j + 4 && k < N; k++)
                      B[k][i + l - j] = A[k][l];
              for (l = j; l < j + 8 && l < M; l++)
                  for (k = j + 4; k < j + 8 && k < N; k++)
                      B[k - 4][i + l - j + 8] = A[k][l];
              for (l = j; l < j + 4 && l < M; l++) {
                  for (k = j; k < j + 4 && k < N; k++)
                      B[l][k] = B[k][i + l - j];
                  for (k = j + 4; k < j + 8 && k < N; k++)
                      B[l][k] = B[k - 4][i + l - j + 8];
              }
              for (l = j + 4; l < j + 8 && l < M; l++) {
                  for (k = j; k < j + 4 && k < N; k++)
                      B[l][k] = B[k][i + l - j];
                  for (k = j + 4; k < j + 8 && k < N; k++)
                      B[l][k] = B[k - 4][i + l - j + 8];
              }
              for (i = 0; i < N; i += 8) {
                  if (i != j) {
                      for (k = i; k < i + 2 && k < N; k++)
                          for (l = j; l < j + 4 && l < M; l++)
                              B[l][k] = A[k][l];
                      a0 = A[i][j + 4];
                      a1 = A[i][j + 5];
                      a2 = A[i][j + 6];
                      a3 = A[i][j + 7];
                      a4 = A[i + 1][j + 4];
                      a5 = A[i + 1][j + 5];
                      a6 = A[i + 1][j + 6];
                      a7 = A[i + 1][j + 7];
                      for (k = i + 2; k < i + 4 && k < N; k++) {
                          for (l = j; l < j + 4 && l < M; l++)
                              B[l][k] = A[k][l];
                          for (l = j + 4; l < j + 8 && l < M; l++)
                              B[k - i + j][l - j + i] = A[k][l];
                      }
                      for (k = i + 4; k < i + 8 && k < N; k++)
                          for (l = j; l < j + 2 && l < M; l++)
                              B[l][k] = A[k][l];
                      for (k = i + 2; k < i + 4 && k < N; k++)
                          for (l = j + 4; l < j + 6 && l < M; l++)
                              B[l][k] = B[k - i + j][l - j + i];
                      B[j + 4][i] = a0;
                      B[j + 5][i] = a1;
                      B[j + 4][i + 1] = a4;
                      B[j + 5][i + 1] = a5;
                      a0 = B[j + 2][i + 6];
                      a1 = B[j + 2][i + 7];
                      a4 = B[j + 3][i + 6];
                      a5 = B[j + 3][i + 7];
                      for (k = i + 4; k < i + 8 && k < N; k++)
                          for (l = j + 2; l < j + 4 && l < M; l++)
                              B[l][k] = A[k][l];
                      B[j + 6][i] = a2;
                      B[j + 7][i] = a3;
                      B[j + 6][i + 1] = a6;
                      B[j + 7][i + 1] = a7;
                      B[j + 6][i + 2] = a0;
                      B[j + 7][i + 2] = a1;
                      B[j + 6][i + 3] = a4;
                      B[j + 7][i + 3] = a5;
                      for (k = i + 4; k < i + 8 && k < N; k++)
                          for (l = j + 4; l < j + 8 && l < M; l++)
                              B[l][k] = A[k][l];
                  }
              }
          }
      }

      ENSURES(is_transpose(M, N, A, B));
  }

  /* 
   * You can define additional transpose functions below. We've defined
   * a simple one below to help you get started. 
   */ 

  /* 
   * trans - A simple baseline transpose function, not optimized for the cache.
   */
  char trans_desc[] = "Simple row-wise scan transpose";
  void trans(int M, int N, int A[N][M], int B[M][N])
  {
      int i, j, tmp;

      REQUIRES(M > 0);
      REQUIRES(N > 0);

      for (i = 0; i < N; i++) {
          for (j = 0; j < M; j++) {
              tmp = A[i][j];
              B[j][i] = tmp;
          }
      }    

      ENSURES(is_transpose(M, N, A, B));
  }

  /*
   * registerFunctions - This function registers your transpose
   *     functions with the driver.  At runtime, the driver will
   *     evaluate each of the registered functions and summarize their
   *     performance. This is a handy way to experiment with different
   *     transpose strategies.
   */
  void registerFunctions()
  {
      /* Register your solution function */
      registerTransFunction(transpose_submit, transpose_submit_desc); 

      /* Register any additional transpose functions */
      registerTransFunction(trans, trans_desc); 

  }

  /* 
   * is_transpose - This helper function checks if B is the transpose of
   *     A. You can check the correctness of your transpose by calling
   *     it before returning from the transpose function.
   */
  int is_transpose(int M, int N, int A[N][M], int B[M][N])
  {
      int i, j;

      for (i = 0; i < N; i++) {
          for (j = 0; j < M; ++j) {
              if (A[i][j] != B[j][i]) {
                  return 0;
              }
          }
      }
      return 1;
  }
#+end_src

* 运行结果与分析
  :PROPERTIES:
  :CUSTOM_ID: 运行结果与分析
  :END:
#+begin_src shell
  # yaaannn @ YAAANNN-PC in ~/Documents/ICSLAB/cachelab [14:44:07] 
  $ python2 driver.py
  Part A: Testing cache simulator
  Running ./test-csim
                          Your simulator     Reference simulator
  Points (s,E,b)    Hits  Misses  Evicts    Hits  Misses  Evicts
       3 (1,1,1)       9       8       6       9       8       6  traces/yi2.trace
       3 (4,2,4)       4       5       2       4       5       2  traces/yi.trace
       3 (2,1,4)       2       3       1       2       3       1  traces/dave.trace
       3 (2,1,3)     167      71      67     167      71      67  traces/trans.trace
       3 (2,2,3)     201      37      29     201      37      29  traces/trans.trace
       3 (2,4,3)     212      26      10     212      26      10  traces/trans.trace
       3 (5,1,5)     231       7       0     231       7       0  traces/trans.trace
       6 (5,1,5)  265189   21775   21743  265189   21775   21743  traces/long.trace
      27


  Part B: Testing transpose function
  Running ./test-trans -M 32 -N 32
  Running ./test-trans -M 64 -N 64
  Running ./test-trans -M 61 -N 67

  Cache Lab summary:
                          Points   Max pts      Misses
  Csim correctness          27.0        27
  Trans perf 32x32           8.0         8     invalid
  Trans perf 64x64           8.0         8        1027
  Trans perf 61x67          10.0        10        1692
            Total points    53.0        53
#+end_src

其中Cache模拟和矩阵转置均符合要求。
